#!/usr/bin/env python
#
# Script to run gaiaxpspec on a spectrum

from __future__ import print_function

import os
import time
import numpy as np
import gaiaxpspec
from astropy.io import fits
from astropy.table import Table
from argparse import ArgumentParser
from dlnpyutils import utils as dln
import subprocess
import traceback
import importlib as imp
try:
    import __builtin__ as builtins # Python 2
except ImportError:
    import builtins # Python 3

# Main command-line program
if __name__ == "__main__":
    parser = ArgumentParser(description='Run gaiaxpspec fitting on spectra')
    parser.add_argument('files', type=str, nargs='+', help='Spectrum FITS files or list')
    parser.add_argument('--outfile', type=str, nargs=1, default='', help='Output filename')
    parser.add_argument('--figfile', type=str, nargs=1, default='', help='Figure filename')    
    parser.add_argument('-d','--outdir', type=str, nargs=1, default='', help='Output directory')        
    parser.add_argument('-l','--list', action='store_true', help='Input is a list of FITS files')
    parser.add_argument('-p','--plot', action='store_true', help='Save the plots')
    parser.add_argument('-c','--corner', action='store_true', help='Make corner plot with MCMC results')    
    parser.add_argument('-m','--mcmc', action='store_true', help='Run MCMC when fitting spectra individually')
    parser.add_argument('-v','--verbose', action='store_true', help='Verbose output')
    parser.add_argument('-t','--timestamp', action='store_true', help='Add timestamp to Verbose output')    
    args = parser.parse_args()

    t0 = time.time()
    files = args.files
    inpoutfile = dln.first_el(args.outfile)
    inpfigfile = dln.first_el(args.figfile)
    outdir = dln.first_el(args.outdir)
    if outdir == '':
        outdir = None
    else:
        if os.path.exists(outdir) is False:
            os.mkdir(outdir)
    verbose = args.verbose
    timestamp = args.timestamp    
    mcmc = args.mcmc
    corner = args.corner
    saveplot = args.plot
    inlist = dln.first_el(args.list)

    # Timestamp requested, set up logger
    if timestamp and verbose:
        logger = dln.basiclogger()
        logger.handlers[0].setFormatter(logging.Formatter("%(asctime)s [%(levelname)-5.5s]  %(message)s"))
        logger.handlers[0].setStream(sys.stdout)
        builtins.logger = logger   # make it available globally across all modules
    
    # Load files from a list
    if inlist is True:
        # Check that file exists
        if os.path.exists(files[0]) is False:
            raise ValueError(files[0]+' NOT FOUND')
        # Read in the list
        listfile = files[0]
        files = dln.readlines(listfile)
        # If the filenames are relative, add the list directory
        listdir = os.path.dirname(listfile)
        if listdir != '':
            fdir = [os.path.dirname(f) for f in files]
            rel, = np.where(np.char.array(fdir)=='')
            if len(rel)>0:
                for i in range(len(rel)):
                    files[rel[i]] = listdir+'/'+files[rel[i]]
    nfiles = len(files)

    # Outfile and figfile can ONLY be used with a SINGLE file or JOINT fitting
    if (inpoutfile!='') & (nfiles>1):
        raise ValueError('--outfile can only be used with a SINGLE input file')
    if (inpfigfile!='') & (nfiles>1):
        raise ValueError('--figfile can only be used with a SINGLE input file')

    # Fitting individual spectra
    #---------------------------
    if (joint is False) | (nfiles==1):
    
        if (verbose is True) & (nfiles>1):
            print('--- Running gaiaxpspec on %d spectra ---' % nfiles)
        
        # Loop over the files
        for i,f in enumerate(files):
            # Check that the file exists
            if os.path.exists(f) is False:
                print(f+' NOT FOUND')
                continue

            try:
            
                # Load the spectrum
                spec = doppler.read(f,format=reader)
    
                if (verbose is True):
                    if (nfiles>1):
                        if (i>0): print('')
                        print('Spectrum %3d:  %s  S/N=%6.1f ' % (i+1,f,spec.snr))
                    else:
                        print('%s  S/N=%6.1f ' % (f,spec.snr))
                    
                # Save the figure
                figfile = None
                if (nfiles==1) & (inpfigfile!=''):
                    figfile = inpfigfile
                if (inpfigfile=='') & (saveplot is True):
                    fdir,base,ext = doppler.utils.splitfilename(f)
                    figfile = base+'_gaiafit.png'
                    if outdir is not None: figfile = outdir+'/'+figfile
                    if (outdir is None) & (fdir != ''): figfile = fdir+'/'+figfile 
                # Save a corner plot
                cornername = None
                if corner is True:
                    fdir,base,ext = doppler.utils.splitfilename(f)
                    cornername = base+'_gaiaxpspec_corner.png'
                    if outdir is not None: cornername = outdir+'/'+cornername
                    if (outdir is None) & (fdir != ''): cornername = fdir+'/'+cornername
                    
                # Run gaiaxpspec
                out = gaiaxspec.fitter.solvecat(f,mcmc=mcmc,figfile=figfile,verbose=verbose,cornername=cornername)
                
                # Save the output
                if inpoutfile!='':
                    outfile = inpoutfile
                else:
                    fdir,base,ext = utils.splitfilename(f)
                    outfile = base+'_gaiaxpyspec.fits'
                    if outdir is not None: outfile = outdir+'/'+outfile
                    if (outdir is None) & (fdir != ''): outfile = fdir+'/'+outfile
                if verbose is True:
                    print('Writing output to '+outfile)
                if os.path.exists(outfile): os.remove(outfile)
                Table(out).write(outfile)
                # append best model
                hdulist = fits.open(outfile)
                hdu = fits.PrimaryHDU(model.flux)
                hdulist.append(hdu)
                hdulist.writeto(outfile,overwrite=True)
                hdulist.close()

            except Exception as e:
                if verbose is True:
                    print('Doppler failed on '+f+' '+str(e))
                    traceback.print_exc()


                
